use std::str::from_utf8;

use aes_gcm::aead::Aead;
// AES128-GCM
use aes_gcm::aes::Aes128;
use aes_gcm::{AesGcm, Aes128Gcm, KeyInit};
use digest::generic_array::GenericArray;
use digest::consts::U12;

#[test]
fn aes_gcm_encrypt() {    
    let nonce = [0u8;12];
    let deal_buff: [u8; 210] = [10, 32, 14, 172, 147, 2, 139, 97, 220, 249, 120, 24, 195, 3, 188, 
        186, 28, 79, 109, 223, 235, 128, 173, 50, 75, 193, 227, 75, 255, 147, 64, 115, 80, 23, 18, 36, 
        8, 0, 18, 32, 179, 74, 143, 12, 143, 206, 126, 36, 216, 58, 19, 128, 200, 39, 226, 27, 254, 232, 
        123, 58, 24, 169, 155, 223, 8, 95, 220, 92, 150, 182, 128, 6, 24, 4, 34, 32, 224, 15, 220, 93, 
        76, 242, 86, 129, 63, 49, 203, 150, 109, 135, 96, 126, 123, 232, 157, 203, 53, 173, 176, 44, 55, 
        118, 149, 48, 247, 204, 70, 122, 34, 32, 226, 175, 77, 178, 219, 122, 5, 210, 236, 127, 13, 70, 133, 
        115, 228, 17, 40, 88, 86, 249, 193, 167, 227, 217, 240, 187, 48, 33, 146, 228, 251, 132, 34, 32, 150, 
        86, 157, 57, 152, 68, 32, 103, 195, 36, 45, 190, 128, 144, 217, 181, 70, 31, 178, 181, 153, 170, 123, 
        85, 19, 244, 203, 111, 46, 31, 46, 240, 34, 32, 107, 27, 175, 73, 104, 204, 142, 217, 190, 127, 58, 
        180, 87, 124, 161, 208, 18, 78, 75, 45, 136, 55, 75, 48, 139, 93, 101, 9, 57, 172, 38, 192];
    let hkdf_context:[u8; 32] = [88, 71, 70, 230, 74, 255, 157, 216, 162, 199, 155, 39, 83, 23, 60, 114, 
        54, 174, 227, 173, 34, 184, 245, 220, 67, 205, 73, 222, 61, 176, 193, 214];
    let encrypted: [u8; 226] = [60, 174, 109, 169, 173, 178, 76, 154, 41, 67, 113, 96, 181, 203, 173, 144, 50, 
        93, 198, 112, 246, 196, 156, 9, 133, 41, 105, 52, 254, 226, 77, 153, 32, 226, 201, 14, 163, 153, 126, 2, 213, 
        37, 82, 248, 189, 210, 109, 65, 147, 38, 81, 249, 91, 176, 180, 9, 54, 171, 51, 27, 92, 221, 70, 167, 72, 15, 
        67, 56, 151, 44, 225, 86, 240, 167, 164, 196, 159, 59, 38, 121, 92, 170, 172, 37, 47, 240, 95, 3, 233, 55, 126, 
        87, 221, 54, 142, 186, 16, 241, 244, 5, 109, 90, 37, 188, 169, 246, 177, 183, 248, 126, 177, 220, 139, 112, 213, 
        168, 59, 196, 12, 54, 116, 202, 186, 154, 2, 40, 228, 151, 9, 230, 105, 198, 185, 2, 158, 223, 246, 97, 84, 52, 
        81, 10, 142, 158, 43, 54, 235, 236, 132, 236, 168, 31, 203, 172, 184, 234, 212, 24, 26, 56, 79, 120, 6, 10, 78, 
        83, 143, 189, 36, 19, 174, 102, 177, 217, 105, 37, 10, 202, 170, 254, 248, 228, 191, 147, 189, 231, 124, 59, 138,
        107, 141, 210, 164, 207, 173, 24, 174, 35, 166, 16, 109, 128, 136, 215, 102, 4, 99, 104, 204, 22, 152, 197, 191, 
        252, 246, 176, 128, 72, 8, 139, 220, 18, 188, 11, 31, 17];
    let _encrypted_vec = encrypted.to_vec();

    let cipher_text = Aes128Gcm::new(GenericArray::from_slice(&hkdf_context)).encrypt(GenericArray::from_slice(&nonce), &deal_buff[..]).unwrap();
    println!("{:#?}", cipher_text)
    //assert_eq!(cipher_text, encrypted_vec)
}

#[test]
fn aes_gcm_decrypt() {    
    let nonce = [0u8;12];
    let cipher: [u8; 226] = [60, 174, 109, 169, 173, 178, 76, 154, 41, 67, 113, 96, 181, 203, 173, 144, 50, 
        93, 198, 112, 246, 196, 156, 9, 133, 41, 105, 52, 254, 226, 77, 153, 32, 226, 201, 14, 163, 153, 126, 2, 
        213, 37, 82, 248, 189, 210, 109, 65, 147, 38, 81, 249, 91, 176, 180, 9, 54, 171, 51, 27, 92, 221, 70, 
        167, 72, 15, 67, 56, 151, 44, 225, 86, 240, 167, 164, 196, 159, 59, 38, 121, 92, 170, 172, 37, 47, 240, 
        95, 3, 233, 55, 126, 87, 221, 54, 142, 186, 16, 241, 244, 5, 109, 90, 37, 188, 169, 246, 177, 183, 248, 
        126, 177, 220, 139, 112, 213, 168, 59, 196, 12, 54, 116, 202, 186, 154, 2, 40, 228, 151, 9, 230, 105, 198, 
        185, 2, 158, 223, 246, 97, 84, 52, 81, 10, 142, 158, 43, 54, 235, 236, 132, 236, 168, 31, 203, 172, 184, 
        234, 212, 24, 26, 56, 79, 120, 6, 10, 78, 83, 143, 189, 36, 19, 174, 102, 177, 217, 105, 37, 10, 202, 170, 
        254, 248, 228, 191, 147, 189, 231, 124, 59, 138, 107, 141, 210, 164, 207, 173, 24, 174, 35, 166, 16, 109, 
        128, 136, 215, 102, 4, 99, 104, 204, 22, 152, 197, 191, 252, 246, 176, 128, 72, 8, 139, 220, 18, 188, 11, 31, 17];
    let hkdf_context: [u8; 32] = [88, 71, 70, 230, 74, 255, 157, 216, 162, 199, 155, 39, 83, 23, 60, 114, 54, 174, 
        227, 173, 34, 184, 245, 220, 67, 205, 73, 222, 61, 176, 193, 214];
    let decrypted: [u8; 210] = [10, 32, 14, 172, 147, 2, 139, 97, 220, 249, 120, 24, 195, 3, 188, 186, 28, 79, 109, 223, 
        235, 128, 173, 50, 75, 193, 227, 75, 255, 147, 64, 115, 80, 23, 18, 36, 8, 0, 18, 32, 179, 74, 143, 12, 143, 206, 
        126, 36, 216, 58, 19, 128, 200, 39, 226, 27, 254, 232, 123, 58, 24, 169, 155, 223, 8, 95, 220, 92, 150, 182, 128,
        6, 24, 4, 34, 32, 224, 15, 220, 93, 76, 242, 86, 129, 63, 49, 203, 150, 109, 135, 96, 126, 123, 232, 157, 203, 53,
        173, 176, 44, 55, 118, 149, 48, 247, 204, 70, 122, 34, 32, 226, 175, 77, 178, 219, 122, 5, 210, 236, 127, 13, 70,
        133, 115, 228, 17, 40, 88, 86, 249, 193, 167, 227, 217, 240, 187, 48, 33, 146, 228, 251, 132, 34, 32, 150, 86, 
        157, 57, 152, 68, 32, 103, 195, 36, 45, 190, 128, 144, 217, 181, 70, 31, 178, 181, 153, 170, 123, 85, 19, 244,
        203, 111, 46, 31, 46, 240, 34, 32, 107, 27, 175, 73, 104, 204, 142, 217, 190, 127, 58, 180, 87, 124, 161, 208, 
        18, 78, 75, 45, 136, 55, 75, 48, 139, 93, 101, 9, 57, 172, 38, 192];
}